/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type PostsPageMetadata = {
  _id: string;
  _type: "postsPageMetadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  seo?: Seo;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  lotus?: boolean;
  socialLinksIntro?: string;
  socialLinks?: Array<{
    platform?: "facebook" | "linkedin" | "twitter" | "github" | "soundcloud" | "youtube" | "instagram";
    url?: string;
    _type: "socialLink";
    _key: string;
  }>;
  copyrightText?: string;
  credit?: boolean;
};

export type NowPage = {
  _id: string;
  _type: "nowPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder?: Array<{
    _key: string;
  } & SplitImage | {
    _key: string;
  } & Content>;
  seo?: Seo;
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder?: Array<{
    _key: string;
  } & SplitImage | {
    _key: string;
  } & Content>;
  seo?: Seo;
};

export type Homepage = {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder?: Array<{
    _key: string;
  } & Hero | {
    _key: string;
  } & SplitImage | {
    _key: string;
  } & Content | {
    _key: string;
  } & PickedPosts>;
  seo?: Seo;
};

export type PickedPosts = {
  _type: "pickedPosts";
  heading?: string;
  posts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
};

export type SplitImage = {
  _type: "splitImage";
  title?: string;
  orientation?: "imageLeft" | "imageRight";
  contentMatter?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    description?: string;
    width?: number;
    _type: "image";
    _key: string;
  }>;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Content = {
  _type: "content";
  title?: string;
  contentMatter?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    description?: string;
    width?: number;
    _type: "image";
    _key: string;
  }>;
};

export type Hero = {
  _type: "hero";
  title?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  titleColor?: Color;
  subtitle?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  subtitleColor?: Color;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  overlayColor?: Color;
  blur?: number;
  initialHeaderTextColor?: Color;
  cta?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  language?: "en" | "bn";
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    description?: string;
    width?: number;
    _type: "image";
    _key: string;
  }>;
  description?: string;
  seo?: Seo;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  titleInBangla?: string;
  slug?: Slug;
  seo?: Seo;
};

export type Seo = {
  _type: "seo";
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  noIndex?: boolean;
};

export type PlainBlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal";
  listItem?: never;
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  description?: string;
  width?: number;
  _type: "image";
  _key: string;
}>;

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = PostsPageMetadata | SiteSettings | NowPage | AboutPage | Homepage | PickedPosts | SplitImage | Content | Hero | Post | Category | Seo | PlainBlockContent | BlockContent | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: POSTS_QUERY
// Query: *[_type == "post" && seo.noIndex != true && defined(slug.current)]|order(publishedAt desc){  _id,  language,  title,  slug,  mainImage,  publishedAt,  "category": category->{    title,    titleInBangla,    slug,    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description,  ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },  },  description,}
export type POSTS_QUERYResult = Array<{
  _id: string;
  language: "bn" | "en" | null;
  title: string | null;
  slug: Slug | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  category: {
    title: string | null;
    titleInBangla: string | null;
    slug: Slug | null;
    seo: {
      title: string | "";
      description: string | "";
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      noIndex: boolean | false;
    };
  } | null;
  description: string | null;
}>;
// Variable: POSTS_OF_CATEGORY_QUERY
// Query: *[_type == "post" && seo.noIndex != true && defined(slug.current) && category->slug.current == $category]|order(publishedAt desc){  _id,  language,  title,  slug,  body,  mainImage,  publishedAt,  "category": category->{    title,    titleInBangla,    slug,    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description,  ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },  },  description,}
export type POSTS_OF_CATEGORY_QUERYResult = Array<{
  _id: string;
  language: "bn" | "en" | null;
  title: string | null;
  slug: Slug | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    description?: string;
    width?: number;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  category: {
    title: string | null;
    titleInBangla: string | null;
    slug: Slug | null;
    seo: {
      title: string | "";
      description: string | "";
      image: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      } | null;
      noIndex: boolean | false;
    };
  } | null;
  description: string | null;
}>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  language,  title,  body[]{    ...,    asset->{      _id,      metadata {        dimensions {          width,          aspectRatio,        }      }    }  },  mainImage,  publishedAt,  "category": category->{     title,     titleInBangla,     slug,  },  "seo": {    "title": coalesce(seo.title, title, ""),    "description": coalesce(seo.description,  ""),    "image": seo.image,    "noIndex": seo.noIndex == true  },}
export type POST_QUERYResult = {
  _id: string;
  language: "bn" | "en" | null;
  title: string | null;
  body: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
    asset: null;
  } | {
    asset: {
      _id: string;
      metadata: {
        dimensions: {
          width: number | null;
          aspectRatio: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    description?: string;
    width?: number;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  publishedAt: string | null;
  category: {
    title: string | null;
    titleInBangla: string | null;
    slug: Slug | null;
  } | null;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
} | null;
// Variable: CATEGORY_QUERY
// Query: *[_type == "category" && slug.current == $category][0]{  _id,  title,}
export type CATEGORY_QUERYResult = {
  _id: string;
  title: string | null;
} | null;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category"]{    _id,    title,    slug,  }
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: HOMEPAGE_QUERY
// Query: *[_type == "homepage" && _id == "homepage"][0]{    ...,    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description,  ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },    pageBuilder[]{      ...,      (_type == "content" || _type == "splitImage") => {        ...,        contentMatter[]{          ...,          _type == "image" => {            ...,            asset->{              _id,              metadata {                dimensions {                  width,                  aspectRatio                }              }            }          }        }      },      (_type == "pickedPosts") => {        ...,        "posts": posts[]->{          _id,          language,          title,          slug,          mainImage,          publishedAt,          "category": category->{            title,            titleInBangla,            slug,            "seo": {              "title": coalesce(seo.title, title, ""),              "description": coalesce(seo.description,  ""),              "image": seo.image,              "noIndex": seo.noIndex == true            },          },          description,        }      }    }  }
export type HOMEPAGE_QUERYResult = {
  _id: string;
  _type: "homepage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder: Array<{
    _key: string;
    _type: "content";
    title?: string;
    contentMatter: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      description?: string;
      width?: number;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _key: string;
    _type: "hero";
    title?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    titleColor?: Color;
    subtitle?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    subtitleColor?: Color;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    overlayColor?: Color;
    blur?: number;
    initialHeaderTextColor?: Color;
    cta?: string;
  } | {
    _key: string;
    _type: "pickedPosts";
    heading?: string;
    posts: Array<{
      _id: string;
      language: "bn" | "en" | null;
      title: string | null;
      slug: Slug | null;
      mainImage: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      publishedAt: string | null;
      category: {
        title: string | null;
        titleInBangla: string | null;
        slug: Slug | null;
        seo: {
          title: string | "";
          description: string | "";
          image: {
            asset?: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            };
            media?: unknown;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: "image";
          } | null;
          noIndex: boolean | false;
        };
      } | null;
      description: string | null;
    }> | null;
  } | {
    _key: string;
    _type: "splitImage";
    title?: string;
    orientation?: "imageLeft" | "imageRight";
    contentMatter: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      description?: string;
      width?: number;
      _type: "image";
      _key: string;
    }> | null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  }> | null;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
} | null;
// Variable: ABOUT_ME_PAGE_QUERY
// Query: *[_type == "aboutPage" && _id == "about-page"][0]{    ...,    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description,  ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },    pageBuilder[]{      ...,      (_type == "content" || _type == "splitImage") => {        ...,        contentMatter[]{          ...,          _type == "image" => {            ...,            asset->{              _id,              metadata {                dimensions {                  width,                  aspectRatio                }              }            }          }        }      }    }  }
export type ABOUT_ME_PAGE_QUERYResult = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder: Array<{
    _key: string;
    _type: "content";
    title?: string;
    contentMatter: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      description?: string;
      width?: number;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _key: string;
    _type: "splitImage";
    title?: string;
    orientation?: "imageLeft" | "imageRight";
    contentMatter: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      description?: string;
      width?: number;
      _type: "image";
      _key: string;
    }> | null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  }> | null;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
} | null;
// Variable: NOW_PAGE_QUERY
// Query: *[_type == "nowPage" && _id == "now-page"][0]{    ...,    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description,  ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },    pageBuilder[]{      ...,      (_type == "content" || _type == "splitImage") => {        ...,        contentMatter[]{          ...,          _type == "image" => {            ...,            asset->{              _id,              metadata {                dimensions {                  width,                  aspectRatio                }              }            }          }        }      }    }  }
export type NOW_PAGE_QUERYResult = {
  _id: string;
  _type: "nowPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  pageBuilder: Array<{
    _key: string;
    _type: "content";
    title?: string;
    contentMatter: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      description?: string;
      width?: number;
      _type: "image";
      _key: string;
    }> | null;
  } | {
    _key: string;
    _type: "splitImage";
    title?: string;
    orientation?: "imageLeft" | "imageRight";
    contentMatter: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    } | {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            aspectRatio: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      description?: string;
      width?: number;
      _type: "image";
      _key: string;
    }> | null;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  }> | null;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
} | null;
// Variable: POSTS_PAGE_METADATA_QUERY
// Query: *[_type == "postsPageMetadata"][0]{    ...,    "seo": {      "title": coalesce(seo.title, title, ""),      "description": coalesce(seo.description,  ""),      "image": seo.image,      "noIndex": seo.noIndex == true    },  }
export type POSTS_PAGE_METADATA_QUERYResult = {
  _id: string;
  _type: "postsPageMetadata";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  seo: {
    title: string | "";
    description: string | "";
    image: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    noIndex: boolean | false;
  };
} | null;
// Variable: HEADER_COLOR_QUERY
// Query: *[_type == "homepage"][0].pageBuilder[_type == "hero"][0]{  _type,  initialHeaderTextColor}
export type HEADER_COLOR_QUERYResult = {
  _type: "hero";
  initialHeaderTextColor: Color | null;
} | null;
// Variable: SITE_SEETTINGS_QUERY
// Query: *[_type == "siteSettings" && _id == "site-settings"][0]{  lotus,  socialLinksIntro,  socialLinks[]{    platform,    url  },  copyrightText,  credit,}
export type SITE_SEETTINGS_QUERYResult = {
  lotus: boolean | null;
  socialLinksIntro: string | null;
  socialLinks: Array<{
    platform: "facebook" | "github" | "instagram" | "linkedin" | "soundcloud" | "twitter" | "youtube" | null;
    url: string | null;
  }> | null;
  copyrightText: string | null;
  credit: boolean | null;
} | null;
// Variable: OG_IMAGE_QUERY
// Query: *[_id == $id][0]{    title,    "image": mainImage.asset->{      _id,      metadata {        palette      }    }  }
export type OG_IMAGE_QUERYResult = {
  title: null;
  image: null;
} | {
  title: string | null;
  image: null;
} | {
  title: string | null;
  image: {
    _id: string;
    metadata: {
      palette: SanityImagePalette | null;
    } | null;
  } | null;
} | null;
// Variable: SITEMAP_QUERY
// Query: *[_type == "post"]{    "href": "/posts/" + category->slug.current + "/" + slug.current,    _updatedAt,  }  +  [    *[_type == "homepage"][0]{ "href": "/", _updatedAt },    *[_type == "aboutPage"][0]{ "href": "/about", _updatedAt },    *[_type == "nowPage"][0]{ "href": "/now", _updatedAt },    *[_type == "postsPageMetadata"][0]{ "href": "/posts", _updatedAt }  ]
export type SITEMAP_QUERYResult = Array<{
  href: "/";
  _updatedAt: string;
} | {
  href: "/about";
  _updatedAt: string;
} | {
  href: "/now";
  _updatedAt: string;
} | {
  href: "/posts";
  _updatedAt: string;
} | {
  href: string | null;
  _updatedAt: string;
} | null | null | null | null>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\" && seo.noIndex != true && defined(slug.current)]|order(publishedAt desc){\n  _id,\n  language,\n  title,\n  slug,\n  mainImage,\n  publishedAt,\n  \"category\": category->{\n    title,\n    titleInBangla,\n    slug,\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description,  \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n  },\n  description,\n}": POSTS_QUERYResult;
    "*[_type == \"post\" && seo.noIndex != true && defined(slug.current) && category->slug.current == $category]|order(publishedAt desc){\n  _id,\n  language,\n  title,\n  slug,\n  body,\n  mainImage,\n  publishedAt,\n  \"category\": category->{\n    title,\n    titleInBangla,\n    slug,\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description,  \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n  },\n  description,\n}": POSTS_OF_CATEGORY_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n  _id,\n  language,\n  title,\n  body[]{\n    ...,\n    asset->{\n      _id,\n      metadata {\n        dimensions {\n          width,\n          aspectRatio,\n        }\n      }\n    }\n  },\n  mainImage,\n  publishedAt,\n  \"category\": category->{\n     title,\n     titleInBangla,\n     slug,\n  },\n  \"seo\": {\n    \"title\": coalesce(seo.title, title, \"\"),\n    \"description\": coalesce(seo.description,  \"\"),\n    \"image\": seo.image,\n    \"noIndex\": seo.noIndex == true\n  },\n}": POST_QUERYResult;
    "*[_type == \"category\" && slug.current == $category][0]{\n  _id,\n  title,\n}": CATEGORY_QUERYResult;
    "*[_type == \"category\"]{\n    _id,\n    title,\n    slug,\n  }": CATEGORIES_QUERYResult;
    "*[_type == \"homepage\" && _id == \"homepage\"][0]{\n    ...,\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description,  \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n    pageBuilder[]{\n      ...,\n      (_type == \"content\" || _type == \"splitImage\") => {\n        ...,\n        contentMatter[]{\n          ...,\n          _type == \"image\" => {\n            ...,\n            asset->{\n              _id,\n              metadata {\n                dimensions {\n                  width,\n                  aspectRatio\n                }\n              }\n            }\n          }\n        }\n      },\n      (_type == \"pickedPosts\") => {\n        ...,\n        \"posts\": posts[]->{\n          _id,\n          language,\n          title,\n          slug,\n          mainImage,\n          publishedAt,\n          \"category\": category->{\n            title,\n            titleInBangla,\n            slug,\n            \"seo\": {\n              \"title\": coalesce(seo.title, title, \"\"),\n              \"description\": coalesce(seo.description,  \"\"),\n              \"image\": seo.image,\n              \"noIndex\": seo.noIndex == true\n            },\n          },\n          description,\n        }\n      }\n    }\n  }": HOMEPAGE_QUERYResult;
    "*[_type == \"aboutPage\" && _id == \"about-page\"][0]{\n    ...,\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description,  \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n    pageBuilder[]{\n      ...,\n      (_type == \"content\" || _type == \"splitImage\") => {\n        ...,\n        contentMatter[]{\n          ...,\n          _type == \"image\" => {\n            ...,\n            asset->{\n              _id,\n              metadata {\n                dimensions {\n                  width,\n                  aspectRatio\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }": ABOUT_ME_PAGE_QUERYResult;
    "*[_type == \"nowPage\" && _id == \"now-page\"][0]{\n    ...,\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description,  \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n    pageBuilder[]{\n      ...,\n      (_type == \"content\" || _type == \"splitImage\") => {\n        ...,\n        contentMatter[]{\n          ...,\n          _type == \"image\" => {\n            ...,\n            asset->{\n              _id,\n              metadata {\n                dimensions {\n                  width,\n                  aspectRatio\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }": NOW_PAGE_QUERYResult;
    "*[_type == \"postsPageMetadata\"][0]{\n    ...,\n    \"seo\": {\n      \"title\": coalesce(seo.title, title, \"\"),\n      \"description\": coalesce(seo.description,  \"\"),\n      \"image\": seo.image,\n      \"noIndex\": seo.noIndex == true\n    },\n  }": POSTS_PAGE_METADATA_QUERYResult;
    "*[_type == \"homepage\"][0].pageBuilder[_type == \"hero\"][0]{\n  _type,\n  initialHeaderTextColor\n}": HEADER_COLOR_QUERYResult;
    "*[_type == \"siteSettings\" && _id == \"site-settings\"][0]{\n  lotus,\n  socialLinksIntro,\n  socialLinks[]{\n    platform,\n    url\n  },\n  copyrightText,\n  credit,\n}": SITE_SEETTINGS_QUERYResult;
    "\n  *[_id == $id][0]{\n    title,\n    \"image\": mainImage.asset->{\n      _id,\n      metadata {\n        palette\n      }\n    }\n  }\n": OG_IMAGE_QUERYResult;
    "\n  *[_type == \"post\"]{\n    \"href\": \"/posts/\" + category->slug.current + \"/\" + slug.current,\n    _updatedAt,\n  }\n  +\n  [\n    *[_type == \"homepage\"][0]{ \"href\": \"/\", _updatedAt },\n    *[_type == \"aboutPage\"][0]{ \"href\": \"/about\", _updatedAt },\n    *[_type == \"nowPage\"][0]{ \"href\": \"/now\", _updatedAt },\n    *[_type == \"postsPageMetadata\"][0]{ \"href\": \"/posts\", _updatedAt }\n  ]\n": SITEMAP_QUERYResult;
  }
}
